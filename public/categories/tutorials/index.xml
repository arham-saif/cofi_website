<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on Culture of Insight</title>
    <link>/categories/tutorials/</link>
    <description>Recent content in Tutorials on Culture of Insight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Culture of Insight. All Rights Reserved.</copyright>
    <lastBuildDate>Mon, 20 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automated Data Reports with R</title>
      <link>/blog/2018/08/20/2018-08-20-automated-data-reports-with-r/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/08/20/2018-08-20-automated-data-reports-with-r/</guid>
      <description>A lot of data analysts will find themselves doing repetitive manual tasks on a data set every day/week/month in Excel then copying and pasting their updated charts and tables into Word or PowerPoint reports - if this sounds like your job description, you may want to consider switching to a programming language like R with which you can automate the majority of these processes; from importing your data all the way through to emailing your boss the final report.</description>
    </item>
    
    <item>
      <title>Multivariate Dot-Density Maps in R with sf &amp; ggplot2</title>
      <link>/blog/2018/05/02/2018-04-08-multivariate-dot-density-maps-in-r-with-sf-ggplot2/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/05/02/2018-04-08-multivariate-dot-density-maps-in-r-with-sf-ggplot2/</guid>
      <description>BackgroundLast June I did a blog post about building dot-denisty maps in R using UK Census data. It has proven to be a fairly popular post, most likely due to the maps looking like something you’re more likely to see in the Tate Modern…
Not only do these maps looks beautiful, but there is a strong argument that they do a better job of representing data compared to the more common choropleth methods of filling geographical regions with one colour based on one variable.</description>
    </item>
    
    <item>
      <title>Responsive iframes for Shiny Apps</title>
      <link>/blog/2018/03/15/2018-03-15-responsive-iframes-for-shiny-apps/</link>
      <pubDate>Thu, 15 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/03/15/2018-03-15-responsive-iframes-for-shiny-apps/</guid>
      <description>Getting Shiny out into the wild Shiny has really changed game in terms of analytical web-application development. Anyone with a solid grasp of R programming and some basic HTML + CSS knowledge can get production quality apps and dashboards up and running in days rather than months, and be in complete control of the process yourself. Furthermore, because it&amp;rsquo;s all open-source software, you have total ownership of the product you build - unlike many expensive off-the-shelf GUI solutions.</description>
    </item>
    
    <item>
      <title>Reproducible Shiny App Development with Modules</title>
      <link>/blog/2018/01/05/2017-11-13-reproducible-shiny-app-development-with-modules/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/01/05/2017-11-13-reproducible-shiny-app-development-with-modules/</guid>
      <description>Happy New Year to one and all!
As data scientists/analysts/researchers/programmers/anything else on that crazy data science Venn diagram, I’m assuming all of our new years resolutions involve visualising our data with more sophistication and finesse. So with that in mind, I thought it was high time for a post about the joys of modularizing your shiny app code.
New Year, new improved workflows with emphasis on efficiency &amp;amp; reproducibility, amiright?</description>
    </item>
    
  </channel>
</rss>