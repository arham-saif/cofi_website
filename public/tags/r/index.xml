<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Culture of Insight</title>
    <link>/tags/r/</link>
    <description>Recent content in R on Culture of Insight</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018 Culture of Insight. All Rights Reserved.</copyright>
    <lastBuildDate>Mon, 22 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automated Data Reports with R</title>
      <link>/blog/2018/10/22/2018-08-20-automated-data-reports-with-r/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/10/22/2018-08-20-automated-data-reports-with-r/</guid>
      <description>A lot of data analysts will find themselves doing repetitive manual tasks on a data set every day/week/month in Excel, then copying and pasting their updated pivot tables and charts into Word or PowerPoint reports for their stakeholders. If this sounds like your job description, you may want to consider switching to a programming language like R.
Writing scripts will allow you to automate the majority of these processes; from importing your data all the way through to emailing your boss the final report.</description>
    </item>
    
    <item>
      <title>Multivariate Dot-Density Maps in R with sf &amp; ggplot2</title>
      <link>/blog/2018/05/02/2018-04-08-multivariate-dot-density-maps-in-r-with-sf-ggplot2/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/05/02/2018-04-08-multivariate-dot-density-maps-in-r-with-sf-ggplot2/</guid>
      <description>Background Last June I did a blog post about building dot-denisty maps in R using UK Census data. It has proven to be a fairly popular post, most likely due to the maps looking like something you’re more likely to see in the Tate Modern…
Not only do these maps looks beautiful, but there is a strong argument that they do a better job of representing data compared to the more common choropleth methods of filling geographical regions with one colour based on one variable.</description>
    </item>
    
    <item>
      <title>Map your Google Location Data with R Shiny</title>
      <link>/blog/2018/01/31/2018-01-31-map-your-google-location-data-with-r-shiny/</link>
      <pubDate>Wed, 31 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/01/31/2018-01-31-map-your-google-location-data-with-r-shiny/</guid>
      <description>I Know What You Vizzed Last Summer  tl;dr click the image to launch the app
I guess I’m of that school of thought, I don’t mind my mobile tracking me.
As long as I don’t go breaking the law, or tweeting an ill-advised truth about a politician, it’s unlikely that anyone will be typing the Google Location of my front room into a cruise missile control unit. But I confess a stirring of nerves when I decided to map my own Google Location data using R’s Leaflet package.</description>
    </item>
    
    <item>
      <title>Visualising Intersecting Sets Of Twitter Followers</title>
      <link>/blog/2018/01/25/2018-01-25-visualising-twitter-follower-overlap/</link>
      <pubDate>Thu, 25 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/01/25/2018-01-25-visualising-twitter-follower-overlap/</guid>
      <description>Twitter AnalyticsThere has been a surge in a lot of great twitter analytics recently in the #rstats world, in part due to Michael Kearney’s excellent rtweet package. It makes wrangling with the twitter API like water off a duck’s back (twitter, bird, duck? sorry). You almost feel like some sort of Zuckerberg-esque data tycoon when you realise the amount of data you can access with a few lines of code.</description>
    </item>
    
    <item>
      <title>Building a Cryptocurrency Tracker with R</title>
      <link>/blog/2018/01/22/2018-01-22-building-a-cryptocurrency-tracker-with-r/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/01/22/2018-01-22-building-a-cryptocurrency-tracker-with-r/</guid>
      <description>TL;DR - check the tracker out here. 
As a recent cryptocurrency &amp;lsquo;Investor&amp;rsquo; (0.13 ETH baby) I wanted to build a light tracker tool that could help me keep up with the mad market volatility in a more personalised manner.
Of course, there&amp;rsquo;s no better tool for this task than the open-source programming language R, and the multitude of packages built for it that allows programmers with very modest levels of front-end development and sys-admin knowledge to go from nada to fully deployed, production quality web-application in a few hours.</description>
    </item>
    
    <item>
      <title>Migrating from Xcelsius Dashboards on a Budget</title>
      <link>/blog/2018/01/17/2018-01-17-migrating-from-xcelsius-dashboards-on-a-budget/</link>
      <pubDate>Wed, 17 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/01/17/2018-01-17-migrating-from-xcelsius-dashboards-on-a-budget/</guid>
      <description>The Death of Flash SAP XCelsius was the Ford Fiesta of the BI industry. Inexpensive to run, simple to implement. Businesses could get dashboards up and running in days or hours. We’ve helped clients design over 1,000 XCelsius dashboards over time, so we know how practical and adaptable they were.
But then the industry went and killed Flash. Old XCelsius dashboards, which worked perfectly well last month and posed no threat to anyone’s IT security, are now downloaded and treated as high-risk by browsers, or blocked outright.</description>
    </item>
    
    <item>
      <title>Reproducible Shiny App Development with Modules</title>
      <link>/blog/2018/01/05/2017-11-13-reproducible-shiny-app-development-with-modules/</link>
      <pubDate>Fri, 05 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/2018/01/05/2017-11-13-reproducible-shiny-app-development-with-modules/</guid>
      <description>Happy New Year to one and all!
As data scientists/analysts/researchers/programmers/anything else on that crazy data science Venn diagram, I’m assuming all of our new years resolutions involve visualising our data with more sophistication and finesse. So with that in mind, I thought it was high time for a post about the joys of modularizing your shiny app code.
New Year, new improved workflows with emphasis on efficiency &amp;amp; reproducibility, amiright?</description>
    </item>
    
    <item>
      <title>When It Rains, It Pours</title>
      <link>/blog/2017/10/03/2017-09-20-when-it-rains-it-pours/</link>
      <pubDate>Tue, 03 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017/10/03/2017-09-20-when-it-rains-it-pours/</guid>
      <description>A Dive Into Some Global Flooding Data I always like to keep a look out for interesting open data sets. One great resource for such things is Jeremy Singer-Vine’s Data is Plural weekly newsletter that brings together a collection of “useful, curious datasets” for us all to enjoy and wrangle with.
One that cropped up last week was The Dartmouth Flood Observatory’s Global Archive of Large Flood Events.</description>
    </item>
    
  </channel>
</rss>